{"version":3,"sources":["components/SelectDropdown.js","components/Inputs.js","components/Preview.js","components/OutputCSS.js","components/App.js","serviceWorker.js","index.js"],"names":["handleChange","onChange","event","newEvent","Object","assign","target","value","props","options","otherProps","optionTags","key","map","option","index","id","newOption","name","undefined","data-key","bind","inputCategories","title","fields","type","googleFonts","items","item","family","SmartInput","SelectDropdown","style","width","profile","setProfile","fieldName","DivLeft","category","field","rel","href","textFont","headlineFont","styled","div","PreviewBox","backgroundColor","textColor","textSize","headlineColor","OutputTextBox","readOnly","textarea","App","React","useState","className","Inputs","Preview","OutputCSS","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f11c9166.chunk.js","sourcesContent":["import React from 'react'\n\nconst handleChange = (onChange, event) => {\n  const newEvent = Object.assign({}, event, { target: { value: (event.target.value === 'null') ? null : event.target.value } })\n  if (onChange) onChange(newEvent)\n}\n\nexport default (props) => {\n  const { options, onChange, ...otherProps } = props\n  const optionTags = [\n    <option key='null' value=''>(none)</option>,\n    ...props.options.map((option, index) => {\n      const value = (typeof (option) === 'object' && (option.value || option.id))\n        ? option.value || option.id\n        : option\n      const newOption = {\n        value,\n        name: (typeof (option) === 'object' && option.name) ? option.name : option,\n        key: (option.key !== undefined)\n          ? option.key\n          : (value !== undefined)\n            ? value\n            : index\n      }\n      return <option key={newOption.key} data-key={newOption.key} value={newOption.value}>{newOption.name}</option>\n    })\n  ]\n  return (\n    <select {...otherProps} onChange={handleChange.bind(undefined, props.onChange)}>\n      {optionTags}\n    </select>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport SelectDropdown from './SelectDropdown'\nimport googleFonts from '../config/googleFonts'\n\nconst inputCategories = [\n  {\n    title: 'Background',\n    fields: [\n      {\n        name: 'backgroundColor',\n        title: 'Background color',\n        type: 'color'\n      }\n    ]\n  },\n  {\n    title: 'Text',\n    fields: [\n      {\n        name: 'textColor',\n        title: 'Text color',\n        type: 'color'\n      },\n      {\n        name: 'textFont',\n        title: 'Text font',\n        type: 'select',\n        options: googleFonts.items.map(item => item.family)\n      },\n      {\n        name: 'textSize',\n        title: 'Text size',\n        type: 'select',\n        options: ['10px', '12px', '14px', '16px', '18px', '20px']\n      }\n    ]\n  },\n  {\n    title: 'Headlines',\n    fields: [\n      {\n        name: 'headlineColor',\n        title: 'Headline color',\n        type: 'color'\n      },\n      {\n        name: 'headlineFont',\n        title: 'Headline font',\n        type: 'select',\n        options: googleFonts.items.map(item => item.family)\n      }\n    ]\n  }\n]\n\nconst SmartInput = (props) => props.type === 'select'\n  ? <SelectDropdown {...props} style={{ width: '8em' }} />\n  : <input {...props} />\n\nexport default ({ profile, setProfile }) => {\n  const handleChange = (fieldName, event) => {\n    setProfile({\n      ...profile,\n      [fieldName]: event.target.value\n    })\n  }\n\n  return (\n    <DivLeft>\n      {inputCategories.map(category => (\n        <div key={category.title}>\n          <h2>{category.title}</h2>\n          {category.fields.map(field => (\n            <p key={field.name}>\n              <label>\n                {field.title}:{' '}\n                <SmartInput type={field.type} options={field.options} value={profile[field.name]} onChange={event => handleChange(field.name, event)} />\n              </label>\n            </p>\n          ))}\n        </div>\n      ))}\n      <link rel='stylesheet' href={`https://fonts.googleapis.com/css?family=${profile.textFont}:400&display=swap`} />\n      <link rel='stylesheet' href={`https://fonts.googleapis.com/css?family=${profile.headlineFont}:400,700&display=swap`} />\n    </DivLeft>\n  )\n}\n\nconst DivLeft = styled.div`\n  text-align: left;\n  margin: auto;\n  width: 15em;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default ({ profile }) => (\n  <PreviewBox {...profile}>\n    <h1>This is a headline</h1>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam a nunc. In ante metus, gravida vel, bibendum et, mollis vitae, ipsum. Sed leo nibh, pulvinar dignissim, pretium eget, mattis id, erat.</p>\n  </PreviewBox>\n)\n\n// const getCSS = (profile, fieldName, cssProp) => profile[fieldName] && profile[fieldName] !== ''\n//   ? `${cssProp}: ${profile => profile[fieldName]};`\n//   : ''\n\nconst PreviewBox = styled.div`\n  display: block;\n  width: 20em;\n  min-height: 10em;\n  padding: 1em 2em 3em;\n  margin: auto;\n  margin-top: 1em;\n  text-align: left;\n\n  background-color: ${profile => profile.backgroundColor};\n  color: ${profile => profile.textColor};\n  font-family: ${profile => profile.textFont};\n  font-size: ${profile => profile.textSize};\n\n  h1, h2, h3 {\n    color: ${profile => profile.headlineColor};\n    font-family: ${profile => profile.headlineFont};\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default ({ profile }) => (\n  <OutputTextBox\n    readOnly\n    value={`body {\n  background-color: ${profile.backgroundColor};\n  color: ${profile.textColor};\n  font-family: '${profile.textFont}', sans-serif;\n  font-size: ${profile.textSize};\n}\n\nh1, h2, h3 {\n  color: ${profile.headlineColor};\n  font-family: '${profile.headlineFont}', sans-serif;\n}`}\n  />\n)\n\nconst OutputTextBox = styled.textarea`\n  display: block;\n  width: 20em;\n  min-height: 20em;\n  padding: 1em;\n  margin: auto;\n  margin-top: 1em;\n  border: none;\n  background-color: #555555;\n  color: #F5F5F5;\n\n  &:focus {\n    color: #00CED1;\n  }\n`\n\n/*\n\n  font-family: ${props => props.theme.fontName};\n  color: ${weldTheme.blue};\n\n*/\n","import React from 'react'\nimport './App.css'\n\nimport Inputs from './Inputs'\nimport Preview from './Preview'\nimport OutputCSS from './OutputCSS'\n\nfunction App () {\n  const [profile, setProfile] = React.useState({\n    backgroundColor: '#FFFFFF',\n    textColor: '#555555',\n    textFont: 'Open Sans',\n    textSize: '14px'\n  })\n  return (\n    <main className='App'>\n      <h1>Design Profile Generator</h1>\n      <div className='Panels'>\n        <Inputs profile={profile} setProfile={setProfile} />\n        <Preview profile={profile} />\n        <OutputCSS profile={profile} />\n      </div>\n      <p>\n        Made by <a href='https://twitter.com/tomsoderlund'>@tomsoderlund</a>. Get the <a href='https://github.com/tomsoderlund/design-profile-generator'>source code on GitHub</a>.\n      </p>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}